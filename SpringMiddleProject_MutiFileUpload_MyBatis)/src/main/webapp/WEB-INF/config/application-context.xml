<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 메모리 할당 요청 (Controller등등) -->
	<context:component-scan base-package="com.sist.*"/>
	
	<mvc:annotation-driven />
	<!-- 스프링에서 사용자 정의 클래스를 관리 = 클래스 전송 (객체 생성~객체 소멸) -->
	<!-- 스프링에서 JSP를 찾아서 request를 전송
	 	 Spring MVC
	 	 1. 사용자 요청(JSP를 보여달라 요청) => 스프링에서 제공하는 Controller(DispatcherServlet)
	 	    .do
	 	 2. DispatcherServlet을 요청을 받는다 (Front Controller)
	 	    => 해당 요청을 처리하는 클래스를 찾아라...
	 	 3. HandlerMapping : @Controller가있는 클래스를 찾아온다  
	 		=> 반드시 (클래스에 @Controller, @RestController)
	 *** 4. @requestMapping, @GetMapping, @PostMapping => 아래 있는 메소드를 호출
	 	 5. 메소드를 호출하면 => Model & return (view)
	 	 6. ViewResolver => JSP를 찾고 request를 전송
	 		=>  반드시 경로명 / 확장자 전송
	 *** 7. View(JSP) => 데이터 받아서 출력
	 	 8. 사용자 브라우저로 전송
	 -->
	 <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
	 	p:prefix="/"
	 	p:suffix=".jsp"
	 />
	 
	 <!-- UPLOAD가 있는 경우에만 사용 
	 	  id는 Spring에서 지정된 ID를 사용한다
	  -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
	 />
</beans>
