<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 사용자 정의 클래스 등록 : 스프링은 등록된 클래스만 관리
		 기능이 있는 클래스 : ~VO(데이터형), 인터페이스(제외)
		  데이터베이스 처리 => 생성 ~ 소멸 ~DAO, ~Service : @Repository, @Service
		  브라우저 전송 (요청) ~Controller : @Controller, @RestController(ajax,vue,react,kotlin)
		  Open API (Jsoup,Naver...) ~Manager :@Component(추천, 실시간)
		  => 클래스 메모리 할당을 하는 어노테이션 : @Component
		                                      |
		                            =================================
		                            |
		                    @Repository, @Service, @Controller, @RestController
	 -->
	<!-- (선별 방법) 
	     1. 패키지 단위(component-scan) 2. 클래스 - bean등록 (클래스가 많아질 수록 bean도 증가)
		
		 어노테이션을 이용해 기능별로 선별 해준다 => 패키지로 저장된 걸 
	-->
	<context:component-scan base-package="com.sist.*"/>
	<!-- 스프링 MVC
	     web.xml = DispatcherServlet
	               HandlerMapping : 클래스 찾기
	               ViewResolver : 사용자 등록 = JSP를 찾아서 Model을 전송
	 -->
	                          <!-- 아래의 클래스는 어노테이션이 없어서 bean으로 넣어준다 -->
	 <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
      p:prefix="/"
      p:suffix=".jsp"
   />

	 
	<!-- 
	 	 Validation : 유효성 검사
	 	 @NotNull
	 	 private String name;
	 	 @NotNull
	 	 @Size(max=10,min=1,msg="")  
	 	 private String pwd;
	 -->

</beans>



















